/* Time Complexity : O(n*n) -> number of nodes in the tree * each time search the preorder array for the root.
// Space Complexity : O(n/2*n) - >  at each leaf node - a new copy of the array is created -> O(n*n).
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach : Recursively build reft and right. Find the root from preorder (root,left,right) and recursively find the left subtree and the right subtree from here.
// At each level create a new copy because arrays are passed a reference. */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(inorder.length==0 || preorder.length==0) return null;
        TreeNode root=new TreeNode(preorder[0]);
        //where is root in inorder
        int index=-1;
        for(int i=0;i<inorder.length;i++){
            if(inorder[i]==root.val){
                index=i;break;
            }
        }
        //Array copy - pythin li(0,index)
        int[] preLeft=Arrays.copyOfRange(preorder,1,index+1);
        int[] preRight=Arrays.copyOfRange(preorder,index+1,preorder.length);
        int[] inLeft= Arrays.copyOfRange(inorder,0,index);
        int[] inRight=Arrays.copyOfRange(inorder,index+1,inorder.length);
        root.left=buildTree(preLeft,inLeft);
        root.right=buildTree(preRight,inRight);
        return root;
    }
}
Second Approach - Optimized Version.

/* Time Complexity : O(n) -> number of nodes in the tree.
// Space Complexity : O(n) - > All the nodes with index from the hashmap.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach : Recursively build reft and right. Find the root index from the hashmap and recursively find the left subtree and the right subtree from here by dividing the preorder array based on the index.
// */




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer,Integer> hmap;
    int index=0;// index location in the preorder array.
    //r
    //[3,9,20,15,7] preorder
    // in
    //  [9,3,15,20,7] inorder
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(inorder.length==0 || preorder.length==0) return null;
         hmap=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
           hmap.put(inorder[i],i);
        }
        
        return helper(preorder,inorder,0,inorder.length-1);  
    }
    
    private TreeNode helper(int[] preorder, int[] inorder,int start,int end){
       //base
        if(start>end || index>=preorder.length) return null;
        //logic
        int Idx=hmap.get(preorder[index]); //O(1)
        TreeNode root=new TreeNode(preorder[index]);
        index++;
        root.left=helper(preorder,inorder,start,Idx-1);
        root.right=helper(preorder,inorder,Idx+1,end);
        return root;
        
    }
}