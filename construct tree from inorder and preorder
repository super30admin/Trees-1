/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// time complexity: depends on preorder traversal: O(n)
//space complexity: O(n): inoreddre hashmap

class Solution {
    int[] preorder;
    int[] inorder;
    int pre_index = 0;
    HashMap<Integer, Integer> hmap;
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
    
        this.preorder = preorder;
        this.inorder = inorder;
        hmap = new HashMap<Integer, Integer>();
        int idx = 0;
        
        for(int x: inorder){
            hmap.put(x, idx++);
        }
        
        return helper(0, preorder.length-1);     
    }
    
    public TreeNode helper(int left, int right){
        
        if(left > right) return null;
        
        TreeNode root = new TreeNode(preorder[pre_index]);
        
        int index = hmap.get(preorder[pre_index++]);
        
        root.left = helper(left, index-1);
        root.right = helper(index+1, right);
        
        return root;
        
    }
}
