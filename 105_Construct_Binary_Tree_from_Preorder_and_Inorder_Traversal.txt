/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer, Integer> map = new HashMap<>();
    int preIdx;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        for(int i = 0; i < inorder.length; i++){
            map.put(inorder[i], i);
        }
        preIdx = 0;
        return helper(preorder, inorder, 0, inorder.length);
    }
     TreeNode helper(int[] pre, int[] in, int inStart, int inEnd){
        if(inStart >=inEnd){
            return null;
        }
        TreeNode root = new TreeNode(pre[preIdx++]);
        int rootIdx = map.get(root.val);

        root.left = helper(pre, in, inStart, rootIdx);
        root.right = helper(pre, in, rootIdx+1, inEnd);
        return root;
    }
}