/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
	//105. Construct Binary Tree from Preorder and Inorder Traversal
    //Time complexity : O(n)
    //Space:O(n)
    HashMap<Integer,Integer> map = new HashMap<>();
    int idx;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length == 0)
            return null;
        
        for(int i =0;i<inorder.length;i++)
            map.put(inorder[i],i);
        
       return helper(preorder,inorder,0,inorder.length-1);
        
    }
    
    private TreeNode helper(int[] preorder, int[] inorder,int start,int end){
        //base
        if(start>end)
            return null;
        
        //logic
        int rootVal = preorder[idx];
        idx++;
        TreeNode root = new TreeNode(rootVal);
        int rootIdxInOrder = map.get(rootVal); //This is the root index in Inorder
        root.left = helper(preorder,inorder,start,rootIdxInOrder-1);
        root.right = helper(preorder,inorder,rootIdxInOrder+1,end);
        return root;
        
    }
}