# Validate Binary Search Tree

#In-Order Traversal Approach:
#Time Complexity (TC): O(n)
#Space Complexity (SC): O(n) - for storing the values in a list during in-order traversal.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def inorder_traversal(node):
            if not node:
                return []
            return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right)
        
        values = inorder_traversal(root)
        
        # Check if the resulting values are in ascending order
        for i in range(1, len(values)):
            if values[i] <= values[i - 1]:
                return False
        
        return True
