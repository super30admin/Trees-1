{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww28600\viewh15280\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\
            \
        if len(preorder) == 0 or len(inorder) == 0:\
            return\
        \
        root = TreeNode(preorder[0])\
        rootval = root.val\
        idx = -1\
        for i in range(len(inorder)):\
            if inorder[i] == rootval:\
                idx = i\
                break\
        \
        root.left = self.buildTree(preorder[1:idx + 1], inorder[0:idx])\
        root.right = self.buildTree(preorder[idx + 1:], inorder[idx + 1: ])\
        \
        return root\
        \
        }