//tc: O(n) where n is no.of nodes
//sc: O(h) where h is height of the tree, it can become O(n) when it's a skewed tree
//passed on leetcode: yes
class Solution {
    Boolean flag;
    TreeNode prev;
    public boolean isValidBST(TreeNode root) {
        flag = true;
        prev = null;
        inorder(root);
        return flag;
    }
    
    private void inorder(TreeNode root) {
        //base
        if (root == null) return;
        
        inorder(root.left);
            //st.pop() node will be popped when the left recursion for the node is complete 
            //System.out.println(root.val);
            if (prev != null && prev.val >= root.val){
                flag = false;
            }
        prev = root;
        inorder(root.right);
            //st.pop() node will be popped when the right recursion of the node is complete here
            //System.out.println(root.val);
        
    }
    
}
