# Trees-1

## Problem1 (https://leetcode.com/problems/validate-binary-search-tree/)
class Solution {
    public boolean isValidBST(TreeNode root) {
        Stack<TreeNode> st=new Stack<>();
        TreeNode prev=null;
        while(root!=null || !st.isEmpty())
        {
            while(root!=null)
            {
                st.push(root);
                root=root.left;
            }
            root=st.pop();
            if(prev!=null && prev.val>=root.val)
                return false;
            prev=root;
            root=root.right;
        }
        return true;
    }
}
// Time Complexity :o(n)
// Space Complexity :o(n)
// Did this code successfully run on Leetcode : YES 
// Any problem you faced while coding this : NO 






## Problem2 (https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)
class Solution {
    HashMap<Integer,Integer> map=new HashMap<>();
    int index;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length==0)
            return null;
        for(int i=0;i<inorder.length;i++)
        {
            map.put(inorder[i],i);
        }
        index=0;
        return helper(preorder,inorder,0,inorder.length-1);
    }
    private TreeNode helper(int[] preorder, int[] inorder, int start,int end)
    {
        
        if(start>end)
        {
            return null;
        }
        
        int rootIndex=map.get(preorder[index]);
        TreeNode root=new TreeNode(preorder[index]);
        index++;
        root.left=helper(preorder,inorder,start,rootIndex-1);
        root.right=helper(preorder,inorder,rootIndex+1,end);
        return root;
        
        
    }
}

// Time Complexity :o(n)
// Space Complexity :o(n)
// Did this code successfully run on Leetcode : YES
// Any problem you faced while coding this :No

