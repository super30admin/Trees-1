// Time Complexity : O(n)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode : no
// Any problem you faced while coding this :
index- out of bound

// Your code here along with comments explaining your approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer, Integer> map;
    int index;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length == 0 || preorder == null)
            return null;
        
       map = new HashMap<>();
        for( int i=0; i<inorder.length; i++)
        {
            map.put(inorder[i],i);
        }
        return helper(preorder, 0, preorder.length );
       
    }
    
    private TreeNode helper(int[] preorder, int start, int end)
    {
        if(start > end)
        {
            
            return null;
        }
        
        TreeNode root = new TreeNode(preorder[index]);
        index++;
        int indx = map.get(root.val);
        root.left = helper(preorder, start, indx-1);
        root.right = helper(preorder, indx+1, end);
    return root;
    }
}
