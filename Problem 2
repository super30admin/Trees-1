# Construct Binary Tree from Preorder and Inorder Traversal

# Definition for a binary tree node.

#Time Complexity (TC): O(n) - where n is the number of nodes in the tree, as each node is visited once.
#Space Complexity (SC): O(n) - for the recursive call stack. In the worst case, the height of the call stack is O(n) for a skewed tree, and in the average case, it is O(log n) for a balanced tree.

# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if not preorder or not inorder:
            return None

        root_val = preorder.pop(0)
        root_index = inorder.index(root_val)

        root = TreeNode(root_val)
        root.left = self.buildTree(preorder, inorder[:root_index])
        root.right = self.buildTree(preorder, inorder[root_index + 1:])

        return root
