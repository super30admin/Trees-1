Problem 40 - Validate a BST

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# RECURSIVE SOLUTION
# for every Left Child: min=same(infinity) and max=root.value
# for every Right Child: min= root.value and max=same(infinity)
# TC= O(n) as we are touching every element once
# SC= O(1) if we dont consider space take by recursive stack
# SC= O(n) if we consider space taken by recursive stack

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.helper(root, None, None) # pass root and min max values (-infinity and +infinity) to helper function
    
    def helper(self, root, min, max):
        
        if(root==None):  #Base Case: root==NULL
            return True
        
        if (min!=None) and (root.val<=min):
            return False
        
        if (max!=None) and (root.val>=max):
            return False
        
        return  self.helper(root.left, min, root.val) and self.helper(root.right, root.val, max)
        
 
# ITERATIVE SOLUTION       

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# ITERATIVE SOLUTION
# TC= O(n)
# SC= O(n)

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """ 
        if(root==None):  #Base Case: root==NULL
            return True  
        stack=[]  #creating stack
        prev=None
        while(root!=None or len(stack)>0):
            while(root!=None):
                stack.append(root)
                root=root.left
            root=stack.pop()
            if(prev!=None and root.val<=prev.val):
                return False
            prev=root
            root=root.right    
        return True
