// Time Complexity : O(n) where n = number of nodes in the tree, since we visit each node once.
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return validateBST(root, null, null);
    }
    public boolean validateBST(TreeNode root, Integer low, Integer high){
        if(root == null) return true;
        
        if((low != null && root.val <= low) || (high != null && root.val >= high)){
            return false;
        }
        return validateBST(root.left, low, root.val) && validateBST(root.right, root.val, high);
    }
}
