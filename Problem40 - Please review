// Time Complexity :O(n)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :Yes


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init() { self.val = 0; self.left = nil; self.right = nil; }
 *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }
 *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {
 *         self.val = val
 *         self.left = left
 *         self.right = right
 *     }
 * }
 */
class Solution {
    
    private func checkBst(_ root: TreeNode?, minValue: Int, maxValue: Int) -> Bool {
        if root == nil {
            return true
        }
        
        if root!.val <= minValue || root!.val >= maxValue {
            return false
        }
        
        return checkBst(root?.left, minValue: minValue, maxValue: root!.val) &&
            checkBst(root?.right, minValue: root!.val, maxValue: maxValue)
        
    }
    
    func isValidBST(_ root: TreeNode?) -> Bool {
        return checkBst(root, minValue: Int.min, maxValue: Int.max)
    }
}
