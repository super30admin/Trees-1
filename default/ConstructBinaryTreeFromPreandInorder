   // Time complexity - o(n^2) n - number of nodes (n in for loop * n times recursion)
	// Space complexity - o(n^2)
	// height of the tree
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        if(preorder.length == 0) return null;
        
        int rootVal = preorder[0], idx = -1;
        TreeNode root = new TreeNode(rootVal);
        for(int i = 0; i< inorder.length; i++) {
            if(rootVal == inorder[i]) {
                idx = i;
            }
        }
        
        int [] inLeft = Arrays.copyOfRange(inorder, 0, idx);
        int [] inRight = Arrays.copyOfRange(inorder,idx+1, inorder.length);
        int [] preLeft = Arrays.copyOfRange(preorder,1,idx+1);
        int [] preRight = Arrays.copyOfRange(preorder,idx+1,preorder.length);
        root.left = buildTree(preLeft,inLeft);
        root.right = buildTree(preRight,inRight);
        return root;
    }
    
    //optimized t- o(n) , s - o(n)
    class Solution {
    HashMap<Integer,Integer> map;
    int idx;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        if(preorder.length == 0) return null;
        map = new HashMap<>();
        for(int i = 0; i< inorder.length; i++) {
            map.put(inorder[i],i);
        }
        
        return helper(preorder,0, preorder.length-1);
    }
    
    private TreeNode helper(int[] preorder, int start, int end) {
        //base
        if(start > end) return null;
        
        //logic
        int rootVal = preorder[idx];
        idx++;
        TreeNode root = new TreeNode(rootVal);
        int inIdx = map.get(rootVal);
        root.left = helper(preorder, start, inIdx-1);
        root.right = helper(preorder, inIdx+1, end);
        
        return root;
    }
}
    
    