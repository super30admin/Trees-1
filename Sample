// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

// Validate Binary Search Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev = null;
    public boolean isValidBST(TreeNode root) {
        
//         Stack<TreeNode> stack = new Stack<>();
        
//         while(root!=null || stack.isEmpty()==false){
            
//             while(root!=null){
                
//                 stack.push(root);
//                 root=root.left;  
//             }
            
//             root = stack.pop();
//             System.out.println(root);
            
//             if(prev!=null && prev.val>=root.val){
//                 return false;
//             }
            
//             prev=root;
//             root=root.right;            
//         }
        
//         return true;
        return inOrder(root);
        
    }
    
    
    private boolean inOrder(TreeNode root){
        
        if(root==null){
            return true;
        }
        //lnr
        
        boolean left = inOrder(root.left);
        
        // if(left==false){
        //     return false;
        // }
        
        if(prev!=null && prev.val>=root.val){
            return false;
        }
        
        prev=root;
        
        System.out.println(root);
        boolean right = inOrder(root.right);     
        
        return left && right;
    }
}


// Time Complexity : O(n)
// Space Complexity : O(n^2)
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

// Construct binary tree from preorder and inorder

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        
        if(preorder.length==0 || inorder.length==0){
            return null;
        }
        
        int inorderIndex = 0;
        TreeNode root = new TreeNode(preorder[0]);
        
        for(int i =0; i<inorder.length; i++){
            
            if(inorder[i]==root.val){
                
              inorderIndex = i;
              break;
                
            }
            
        }
        
        int[] leftSubtreePreoder = Arrays.copyOfRange(preorder, 1, inorderIndex+1);
        int[] leftSubtreeInorder = Arrays.copyOfRange(inorder, 0, inorderIndex);
            
        int[] rightSubtreePreorder = Arrays.copyOfRange(preorder, inorderIndex+1, preorder.length);
        int[] rightSubtreeInorder = Arrays.copyOfRange(inorder, inorderIndex+1, inorder.length);
            
        root.left = buildTree(leftSubtreePreoder, leftSubtreeInorder);
        root.right = buildTree(rightSubtreePreorder, rightSubtreeInorder);
        
        
        return root;
        
    }
}



