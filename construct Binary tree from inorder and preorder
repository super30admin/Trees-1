class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
  
        //null
        if(preorder.length == 0) return null;
        int rootVal = preorder[0];
        TreeNode root = new TreeNode(rootVal);
        int rootIdx = -1; //idx of root in inorder
        //find rootVal in inorder
        for(int i = 0; i< inorder.length; i++){
            if(inorder[i] == rootVal){
                rootIdx = i;
                break;
            }
        }
        int [] inLeft = Arrays.copyOfRange(inorder, 0, rootIdx);//rootIdx is excluded
        int [] inRight = Arrays.copyOfRange(inorder, rootIdx+1, inorder.length);
        int [] preLeft = Arrays.copyOfRange(preorder,1, inLeft.length + 1 );
        int [] preRight = Arrays.copyOfRange(preorder, 1+preLeft.length, preorder.length);
        root.left = buildTree(preLeft, inLeft);
        root.right = buildTree(preRight, inRight);
        return root;
    }
}
