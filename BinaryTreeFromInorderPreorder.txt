/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /** Time Complexity - O(N)
    Space Complexity - O(N)
     */
    int rootIdx;
    Map<Integer, Integer> inorderMap;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.inorderMap = new HashMap<>();
        rootIdx= 0;
        for (int i=0; i< inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }
        return helper(preorder, inorder, 0, preorder.length -1);
    }

    private TreeNode helper(int[] preorder, int[] inorder, int start, int end) {
        if (start > end) {
            return null;
        }

        int rootValue = preorder[rootIdx];
        rootIdx++;
        TreeNode node = new TreeNode(rootValue);

        node.left = helper(preorder, inorder, start, inorderMap.get(rootValue) -1);
        node.right = helper(preorder, inorder, inorderMap.get(rootValue) +1, end);
        return node;
    }
}
