/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private Integer prev;
    public boolean isValidBST(TreeNode root) {
      
        prev=null;
        
        return inorder(root);
    }
    public boolean inorder(TreeNode root){
        if(root==null)return true;
        if(inorder(root.left)==false) return false;
        if(prev!=null && prev>=root.val ){
            return false;
        }
        prev=root.val;
        return inorder(root.right);
    }
}
// Time complexity: O(n), n= no of nodes
//Space complexity : O(h) h=height of tree
// approach: used recursive inorder traversal to chech if prev node is less than the curr node, inorder traversal should give increasing order output
