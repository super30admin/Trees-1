/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    int index;
    HashMap<Integer,Integer> map;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        if(preorder == null || inorder == null || preorder.length != inorder.length)
            return null;
        
        index = 0;
        map = new HashMap<>();
        
        for(int i=0;i<inorder.length;i++)
            map.put(inorder[i],i);
        
        return buildTree(preorder,0,preorder.length-1);
    }
    
    private TreeNode buildTree(int[] preorder,int start,int end){
        //base
        if(start > end)
            return null;
        
        int rootVal = preorder[index++];
        TreeNode current = new TreeNode(rootVal);
        
        int rootIndex = map.get(rootVal);
    
        current.left = buildTree(preorder,start,rootIndex-1);
        current.right = buildTree(preorder,rootIndex+1,end);
        
        return current;
    }
}