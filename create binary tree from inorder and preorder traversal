#time complexity: O(n)
#space complexity: O(n)
#did it run on leetcode: yes
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        self.preorderIndex = 0
        self.inorderIndexUmp = {val:idx for idx, val in enumerate(inorder)}
        return self.buildTreeHelper(preorder, 0, len(preorder) - 1)

    def buildTreeHelper(self, preorder: List[int], left: int, right: int) -> TreeNode:
        if left > right:
            return None
        rootValue = preorder[self.preorderIndex]
        self.preorderIndex += 1
        root = TreeNode(rootValue)
        inorderPivotIndex = self.inorderIndexUmp[rootValue]
        root.left = self.buildTreeHelper(preorder, left, inorderPivotIndex - 1)
        root.right = self.buildTreeHelper(preorder, inorderPivotIndex + 1, right)
        return root

        
