/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 * // 2 travesrals are required to form a tree
 // the root is generated by preorder and that value is searched in
 // in inorder and left and right is recursively generated by changing index
 // of inorder array. That is the root should go to left or right.
 // 
 */
class Solution {
    int idx;
    Map<Integer,Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || inorder == null || preorder.length != inorder.length){
            return null;
        }
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        
        return buildFromPre(preorder,0,inorder.length-1);
    }
    
     public TreeNode buildFromPre(int[] preorder,int start, int end){
          if(start > end){
              return null;
          }
         TreeNode root = new TreeNode(preorder[idx]);
         idx++;
         int part = map.get(root.val);
         root.left = buildFromPre(preorder,start,part-1);
         root.right = buildFromPre(preorder,part+1,end);
         return root;
     }
}