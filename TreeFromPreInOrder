/*

TC: O(n) as we go to every element in both arrays
SC: O(n) depends on implicit stack used during recurssion
Thought Process: As we know, preorder gives us roots first and then children, we will first get
root from preorder array and search for that root in inorder array.
Once we find rootIndex in inorder array we then define boundaries for recurssion.

 */

class TreeFromPreInOrder{

    public TreeNode buildTree(int[] preorder, int[] inorder) {

        return helper(preorder,inorder,0,inorder.length-1,0);
    }

    private TreeNode helper(int[] preorder, int[] inorder, int start, int end, int PreOrderIndex){
        if (start > end){
            return null;
        }

        TreeNode root = new TreeNode(PreOrderIndex);
        int rootIndex = start;
        while (inorder[rootIndex]!= preorder[PreOrderIndex]){
            rootIndex++;
        }

        root.left = helper(preorder,inorder,start,rootIndex-1,PreOrderIndex + 1);
        root.right = helper(preorder,inorder,rootIndex+1,end,rootIndex-start+PreOrderIndex+1);

        return root;
    }
}